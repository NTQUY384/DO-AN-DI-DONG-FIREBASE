import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';
import 'dart:async';
import 'package:firebase_auth/firebase_auth.dart' as auth;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:firebase_auth/firebase_auth.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  runApp(Cart(cartProvider: CartProvider(), child: const UngDungSpaThuCung()));
}

class UngDungSpaThuCung extends StatefulWidget {
  const UngDungSpaThuCung({super.key});

  @override
  _UngDungSpaThuCungState createState() => _UngDungSpaThuCungState();
}

class _UngDungSpaThuCungState extends State<UngDungSpaThuCung> {
  final CartProvider _cartProvider = CartProvider();

  @override
  Widget build(BuildContext context) {
    return Cart(
      cartProvider: _cartProvider,
      child: MaterialApp(
        debugShowCheckedModeBanner: false,
        title: 'Spa Th√∫ C∆∞ng',
        theme: ThemeData(
          primarySwatch: Colors.blueGrey,
          scaffoldBackgroundColor: Colors.white,
          appBarTheme: const AppBarTheme(
            backgroundColor: Colors.lightBlueAccent,
            foregroundColor: Colors.white,
          ),
          bottomNavigationBarTheme: const BottomNavigationBarThemeData(
            selectedItemColor: Colors.lightBlueAccent,
            unselectedItemColor: Colors.grey,
            backgroundColor: Colors.white,
          ),
        ),
        home: const ManHinhDangNhap(),
      ),
    );
  }
}

class ManHinhDangNhap extends StatefulWidget {
  const ManHinhDangNhap({Key? key}) : super(key: key);

  @override
  _ManHinhDangNhapState createState() => _ManHinhDangNhapState();
}

class _ManHinhDangNhapState extends State<ManHinhDangNhap> {
  final TextEditingController emailController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();

  void _kiemTraDangNhap() async {
    String email = emailController.text.trim();
    String password = passwordController.text.trim();

    bool success = await UserManager.loginUser(email, password);
    if (success) {
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(builder: (context) => const ManHinhLoading()),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text("Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!"),
          backgroundColor: Colors.redAccent,
          duration: Duration(seconds: 2),
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('ƒêƒÉng Nh·∫≠p')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Image.network(
              'https://benhvienthuyanipet.com/wp-content/uploads/2021/12/petshop1.png',
              height: 120,
              width: 120,
              fit: BoxFit.cover,
              errorBuilder: (context, error, stackTrace) {
                return const Icon(
                  Icons.image_not_supported,
                  size: 50,
                  color: Colors.grey,
                );
              },
            ),
            const SizedBox(height: 20),
            TextField(
              controller: emailController,
              decoration: const InputDecoration(
                labelText: 'Email',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 10),
            TextField(
              controller: passwordController,
              decoration: const InputDecoration(
                labelText: 'M·∫≠t kh·∫©u',
                border: OutlineInputBorder(),
              ),
              obscureText: true,
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.lightBlueAccent,
                minimumSize: const Size(double.infinity, 50),
              ),
              onPressed: _kiemTraDangNhap,
              child: const Text(
                'ƒêƒÉng Nh·∫≠p',
                style: TextStyle(fontSize: 16, color: Colors.white),
              ),
            ),
            TextButton(
              onPressed: () {},
              child: const Text(
                'Qu√™n m·∫≠t kh·∫©u?',
                style: TextStyle(color: Colors.lightBlueAccent),
              ),
            ),
            TextButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const ManHinhDangKy(),
                  ),
                );
              },
              child: const Text(
                'ƒêƒÉng k√Ω t√†i kho·∫£n',
                style: TextStyle(color: Colors.lightBlueAccent),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class ManHinhDangKy extends StatefulWidget {
  const ManHinhDangKy({Key? key}) : super(key: key);

  @override
  _ManHinhDangKyState createState() => _ManHinhDangKyState();
}

class _ManHinhDangKyState extends State<ManHinhDangKy> {
  final TextEditingController _nameController = TextEditingController();
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  /// Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
  void _showErrorMessage(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("‚ùå $message"), backgroundColor: Colors.red),
    );
  }

  /// Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
  void _showSuccessMessage() {
    Fluttertoast.showToast(
      msg: "üéâ ƒêƒÉng k√Ω th√†nh c√¥ng!",
      toastLength: Toast.LENGTH_SHORT,
      gravity: ToastGravity.BOTTOM,
      backgroundColor: Colors.green,
      textColor: Colors.white,
      fontSize: 16.0,
    );
  }

  /// Ki·ªÉm tra email h·ª£p l·ªá
  bool _isValidEmail(String email) {
    return RegExp(
      r"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$",
    ).hasMatch(email);
  }

  /// X·ª≠ l√Ω ƒëƒÉng k√Ω ng∆∞·ªùi d√πng
  Future<void> _registerUser() async {
    String name = _nameController.text.trim();
    String email = _emailController.text.trim();
    String password = _passwordController.text.trim();

    if (name.isEmpty || email.isEmpty || password.isEmpty) {
      _showErrorMessage("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      return;
    }

    if (!_isValidEmail(email)) {
      _showErrorMessage("‚ö†Ô∏è Email kh√¥ng h·ª£p l·ªá!");
      return;
    }

    try {
      // ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
      UserCredential userCredential = await FirebaseAuth.instance
          .createUserWithEmailAndPassword(email: email, password: password);

      // C·∫≠p nh·∫≠t t√™n ng∆∞·ªùi d√πng
      await userCredential.user?.updateProfile(displayName: name);

      // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng v√†o Firestore
      await FirebaseFirestore.instance
          .collection('users')
          .doc(userCredential.user!.uid)
          .set({'name': name, 'email': email});

      _showSuccessMessage();
      Navigator.pop(context);
    } catch (e) {
      _showErrorMessage("ƒêƒÉng k√Ω th·∫•t b·∫°i: ${e.toString()}");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('ƒêƒÉng K√Ω')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextField(
              controller: _nameController,
              decoration: const InputDecoration(
                labelText: 'H·ªç v√† T√™n',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _emailController,
              decoration: const InputDecoration(
                labelText: 'Email',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.emailAddress,
            ),
            const SizedBox(height: 10),
            TextField(
              controller: _passwordController,
              decoration: const InputDecoration(
                labelText: 'M·∫≠t kh·∫©u',
                border: OutlineInputBorder(),
              ),
              obscureText: true,
            ),
            const SizedBox(height: 20),
            ElevatedButton(
              style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),
              onPressed: _registerUser,
              child: const Text(
                'ƒêƒÉng K√Ω',
                style: TextStyle(color: Colors.white),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// ##############################################################################################

class ManHinhLoading extends StatefulWidget {
  const ManHinhLoading({super.key});

  @override
  _ManHinhLoadingState createState() => _ManHinhLoadingState();
}

class _ManHinhLoadingState extends State<ManHinhLoading> {
  @override
  void initState() {
    super.initState();
    Timer(const Duration(seconds: 1), () {
      if (mounted) {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => const ManHinhChinh()),
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: const [
            CircularProgressIndicator(
              valueColor: AlwaysStoppedAnimation<Color>(Colors.lightBlueAccent),
            ),
            SizedBox(height: 20),
            Text('ƒêang t·∫£i...', style: TextStyle(fontSize: 18)),
          ],
        ),
      ),
    );
  }
}

// #############################################################################################

class UserManager {
  static final auth.FirebaseAuth _auth = auth.FirebaseAuth.instance;
  static auth.User? currentUser;

  // ƒêƒÉng k√Ω ng∆∞·ªùi d√πng
  static Future<void> registerUser(String email, String password) async {
    try {
      auth.UserCredential userCredential = await _auth
          .createUserWithEmailAndPassword(email: email, password: password);
      currentUser = userCredential.user; // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
    } catch (e) {
      print("Error registering user: $e");
      throw e; // N√©m l·ªói ƒë·ªÉ x·ª≠ l√Ω ·ªü n∆°i g·ªçi
    }
  }

  // ƒêƒÉng nh·∫≠p ng∆∞·ªùi d√πng
  static Future<bool> loginUser(String email, String password) async {
    try {
      auth.UserCredential userCredential = await _auth
          .signInWithEmailAndPassword(email: email, password: password);
      currentUser = userCredential.user; // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
      return true; // ƒêƒÉng nh·∫≠p th√†nh c√¥ng
    } catch (e) {
      print("Error logging in: $e");
      return false; // ƒêƒÉng nh·∫≠p th·∫•t b·∫°i
    }
  }

  // ƒêƒÉng xu·∫•t ng∆∞·ªùi d√πng
  static Future<void> logoutUser() async {
    await _auth.signOut();
    currentUser = null; // ƒê·∫∑t ng∆∞·ªùi d√πng hi·ªán t·∫°i th√†nh null
  }
}

// ###################################################################################

class ManHinhChinh extends StatefulWidget {
  const ManHinhChinh({super.key});

  @override
  _ManHinhChinhState createState() => _ManHinhChinhState();
}

class _ManHinhChinhState extends State<ManHinhChinh> {
  int _mucDuocChon = 0;

  static const List<Widget> _cacTrang = <Widget>[
    ManHinhDichVu(),
    ManHinhUuDai(),
    ManHinhGioHang(),
    ManHinhHoTroKhachHang(),
    ManHinhCaiDat(),
  ];

  void _chonMuc(int index) {
    setState(() {
      _mucDuocChon = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ClipRRect(
              borderRadius: BorderRadius.circular(25),
              child: Image.network(
                'https://benhvienthuyanipet.com/wp-content/uploads/2021/12/petshop1.png',
                height: 40,
                width: 40,
                fit: BoxFit.cover,
                errorBuilder: (context, error, stackTrace) {
                  return const Icon(
                    Icons.image_not_supported,
                    size: 30,
                    color: Colors.grey,
                  );
                },
              ),
            ),
            const SizedBox(width: 10),
            const Text(
              'Spa Th√∫ C∆∞ng',
              style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
            ),
          ],
        ),
        centerTitle: true,
      ),
      body: _cacTrang[_mucDuocChon],
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(icon: Icon(Icons.spa), label: 'D·ªãch v·ª•'),
          BottomNavigationBarItem(
            icon: Icon(Icons.local_offer),
            label: '∆Øu ƒë√£i',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.shopping_cart),
            label: 'Gi·ªè h√†ng',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.support_agent),
            label: 'H·ªó tr·ª£',
          ),
          BottomNavigationBarItem(icon: Icon(Icons.settings), label: 'C√†i ƒë·∫∑t'),
        ],
        currentIndex: _mucDuocChon,
        selectedItemColor: Colors.lightBlueAccent,
        unselectedItemColor: Colors.grey,
        onTap: _chonMuc,
      ),
    );
  }
}

// #############################################################################################

class ManHinhDichVu extends StatelessWidget {
  const ManHinhDichVu({super.key});

  @override
  Widget build(BuildContext context) {
    final List<Map<String, String>> dichVuSpa = [
      {
        'ten': 'T·∫Øm Spa',
        'moTa':
            'D·ªãch v·ª• t·∫Øm spa d√†nh cho th√∫ c∆∞ng gi√∫p lo·∫°i b·ªè b·ª•i b·∫©n, t·∫ø b√†o ch·∫øt v√† m√πi h√¥i tr√™n c∆° th·ªÉ. '
            'S·ª≠ d·ª•ng s·ªØa t·∫Øm chuy√™n d·ª•ng gi√∫p l√†m m·ªÅm l√¥ng, gi·ªØ ƒë·ªô ·∫©m cho da v√† b·∫£o v·ªá th√∫ c∆∞ng kh·ªèi c√°c b·ªánh ngo√†i da. '
            'Quy tr√¨nh g·ªìm c√°c b∆∞·ªõc: ch·∫£i l√¥ng g·ª° r·ªëi, l√†m ∆∞·ªõt l√¥ng, massage v·ªõi s·ªØa t·∫Øm, x·∫£ s·∫°ch, s·∫•y kh√¥, x·ªãt d∆∞·ª°ng v√† ch·∫£i l√¥ng ho√†n thi·ªán. '
            'D·ªãch v·ª• ph√π h·ª£p v·ªõi m·ªçi gi·ªëng ch√≥ m√®o, ƒë·∫∑c bi·ªát l√† nh·ªØng b√© c√≥ b·ªô l√¥ng d√†i d·ªÖ b·∫øt d√≠nh.',
        'gia': '200,000 VND',
        'hinhAnh':
            'https://thucungshinpet.com/wp-content/uploads/2023/02/2.jpg',
      },
      {
        'ten': 'Mua Th·ª©c ƒÇn',
        'moTa':
            'Cung c·∫•p th·ª©c ƒÉn ch·∫•t l∆∞·ª£ng cao, gi√†u dinh d∆∞·ª°ng v√† ph√π h·ª£p v·ªõi t·ª´ng giai ƒëo·∫°n ph√°t tri·ªÉn c·ªßa th√∫ c∆∞ng. '
            'S·∫£n ph·∫©m bao g·ªìm th·ª©c ƒÉn h·∫°t, pate, snack th∆∞·ªüng, v√† th·ª©c ƒÉn t∆∞∆°i nh∆∞ th·ªãt, c√°, rau c·ªß ch·∫ø bi·∫øn s·∫µn. '
            'Th·ª©c ƒÉn ƒë·∫£m b·∫£o kh√¥ng ch·ª©a ch·∫•t b·∫£o qu·∫£n ƒë·ªôc h·∫°i, h·ªó tr·ª£ h·ªá ti√™u h√≥a, gi√∫p th√∫ c∆∞ng ph√°t tri·ªÉn kh·ªèe m·∫°nh, l√¥ng m∆∞·ª£t, tƒÉng s·ª©c ƒë·ªÅ kh√°ng. '
            'C√≥ nhi·ªÅu d√≤ng s·∫£n ph·∫©m t·ª´ c√°c th∆∞∆°ng hi·ªáu n·ªïi ti·∫øng nh∆∞ Royal Canin, Pedigree, NutriSource, v√† nhi·ªÅu h√£ng kh√°c.',
        'gia': '100,000 VND',
        'hinhAnh':
            'https://petservicehcm.com/wp-content/uploads/2024/07/thuc-an-cho-thu-cung.jpg',
      },
      {
        'ten': 'Ti√™m Ph√≤ng',
        'moTa':
            'Ti√™m ph√≤ng l√† bi·ªán ph√°p quan tr·ªçng gi√∫p b·∫£o v·ªá th√∫ c∆∞ng kh·ªèi c√°c b·ªánh truy·ªÅn nhi·ªÖm nguy hi·ªÉm nh∆∞ b·ªánh d·∫°i, Care, Parvo, Lepto, vi√™m gan truy·ªÅn nhi·ªÖm... '
            'D·ªãch v·ª• bao g·ªìm t∆∞ v·∫•n l·ªãch ti√™m ph√≤ng theo ƒë·ªô tu·ªïi v√† t√¨nh tr·∫°ng s·ª©c kh·ªèe c·ªßa th√∫ c∆∞ng. '
            'Quy tr√¨nh ti√™m an to√†n, s·ª≠ d·ª•ng vaccine ch√≠nh h√£ng, c√≥ ngu·ªìn g·ªëc r√µ r√†ng. '
            'Th√∫ c∆∞ng s·∫Ω ƒë∆∞·ª£c ki·ªÉm tra s·ª©c kh·ªèe tr∆∞·ªõc khi ti√™m ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ ph·∫£n ·ª©ng ph·ª•. '
            'Sau khi ti√™m, nh√¢n vi√™n s·∫Ω h∆∞·ªõng d·∫´n c√°ch chƒÉm s√≥c v√† theo d√µi t√¨nh tr·∫°ng th√∫ c∆∞ng.',
        'gia': '300,000 VND',
        'hinhAnh':
            'https://cdn.tgdd.vn/Files/2021/04/17/1344101/tiem-phong-dai-cho-cho-meo-va-nhung-dieu-chu-nuoi-can-phai-biet-202104171259416241.jpg',
      },
      {
        'ten': 'C·∫Øt T·ªâa L√¥ng',
        'moTa':
            'D·ªãch v·ª• c·∫Øt t·ªâa l√¥ng gi√∫p th√∫ c∆∞ng tr√¥ng g·ªçn g√†ng, ƒë√°ng y√™u h∆°n. '
            'Ch√∫ng t√¥i s·ª≠ d·ª•ng c√°c d·ª•ng c·ª• c·∫Øt t·ªâa chuy√™n nghi·ªáp, ƒë·∫£m b·∫£o kh√¥ng g√¢y t·ªïn th∆∞∆°ng da c·ªßa th√∫ c∆∞ng. '
            'C√≥ nhi·ªÅu ki·ªÉu d√°ng c·∫Øt t·ªâa ph√π h·ª£p v·ªõi t·ª´ng gi·ªëng ch√≥ m√®o, t·ª´ phong c√°ch d·ªÖ th∆∞∆°ng ƒë·∫øn phong c√°ch sang tr·ªçng. '
            'Quy tr√¨nh bao g·ªìm: t·∫Øm s·∫°ch tr∆∞·ªõc khi c·∫Øt, ch·∫£i l√¥ng ƒë·ªÉ g·ª° r·ªëi, c·∫Øt t·ªâa theo y√™u c·∫ßu, d·∫∑m l·∫°i v√† ki·ªÉm tra t·ªïng th·ªÉ. '
            'Ngo√†i ra, d·ªãch v·ª• c√≤n bao g·ªìm v·ªá sinh tai, c·∫Øt m√≥ng v√† l√†m s·∫°ch v√πng m·∫Øt.',
        'gia': '250,000 VND',
        'hinhAnh':
            'https://dailytongdo.com/wp-content/uploads/2024/03/cat-tia-tc.jpg',
      },
      {
        'ten': 'Kh√°m S·ª©c Kh·ªèe',
        'moTa':
            'D·ªãch v·ª• kh√°m s·ª©c kh·ªèe t·ªïng qu√°t gi√∫p ph√°t hi·ªán s·ªõm c√°c b·ªánh l√Ω, ƒë·∫£m b·∫£o th√∫ c∆∞ng lu√¥n trong t√¨nh tr·∫°ng t·ªët nh·∫•t. '
            'Quy tr√¨nh kh√°m bao g·ªìm ki·ªÉm tra th·ªÉ tr·∫°ng, c√¢n n·∫∑ng, da v√† l√¥ng, rƒÉng mi·ªáng, m·∫Øt, tai, h·ªá ti√™u h√≥a, tim m·∫°ch v√† c√°c ch·ªâ s·ªë sinh h√≥a quan tr·ªçng. '
            'B√°c sƒ© s·∫Ω t∆∞ v·∫•n ch·∫ø ƒë·ªô dinh d∆∞·ª°ng, ti√™m ph√≤ng, t·∫©y giun v√† c√°ch chƒÉm s√≥c ph√π h·ª£p. '
            'N·∫øu ph√°t hi·ªán b·ªánh l√Ω, th√∫ c∆∞ng s·∫Ω ƒë∆∞·ª£c t∆∞ v·∫•n ƒëi·ªÅu tr·ªã k·ªãp th·ªùi. '
            'D·ªãch v·ª• ph√π h·ª£p v·ªõi t·∫•t c·∫£ th√∫ c∆∞ng, ƒë·∫∑c bi·ªát l√† nh·ªØng b√© l·ªõn tu·ªïi ho·∫∑c c√≥ d·∫•u hi·ªáu b·ªánh l√Ω c·∫ßn theo d√µi th∆∞·ªùng xuy√™n.',
        'gia': '400,000 VND',
        'hinhAnh':
            'https://benhvienthuyanipet.com/wp-content/uploads/2021/10/tu-van-kham-chua-benh-pet-3.jpg',
      },
    ];

    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'D·ªãch V·ª• Spa Th√∫ C∆∞ng',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        centerTitle: true,
        backgroundColor: Colors.teal,
      ),
      body: Padding(
        padding: const EdgeInsets.all(10.0),
        child: GridView.builder(
          gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
            crossAxisCount: 2,
            childAspectRatio: 0.8,
            crossAxisSpacing: 10,
            mainAxisSpacing: 10,
          ),
          itemCount: dichVuSpa.length,
          itemBuilder: (context, index) {
            return GestureDetector(
              onTap: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder:
                        (context) => ChiTietDichVu(dichVu: dichVuSpa[index]),
                  ),
                );
              },
              child: Card(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15.0),
                ),
                elevation: 5,
                shadowColor: Colors.teal,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    ClipRRect(
                      borderRadius: const BorderRadius.vertical(
                        top: Radius.circular(15),
                      ),
                      child: Image.network(
                        dichVuSpa[index]['hinhAnh']!,
                        height: 120,
                        width: double.infinity,
                        fit: BoxFit.cover,
                        errorBuilder: (context, error, stackTrace) {
                          return const Icon(
                            Icons.image_not_supported,
                            size: 50,
                            color: Colors.grey,
                          );
                        },
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            dichVuSpa[index]['ten']!,
                            style: const TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.bold,
                              color: Colors.teal,
                            ),
                          ),
                          const SizedBox(height: 5),
                          Text(
                            dichVuSpa[index]['moTa']!,
                            style: TextStyle(
                              fontSize: 14,
                              color: Colors.grey.shade700,
                            ),
                            maxLines: 2,
                            overflow: TextOverflow.ellipsis,
                          ),
                          const SizedBox(height: 5),
                          Text(
                            dichVuSpa[index]['gia']!,
                            style: const TextStyle(
                              fontSize: 14,
                              fontWeight: FontWeight.bold,
                              color: Colors.red,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}

class ChiTietDichVu extends StatelessWidget {
  final Map<String, String> dichVu;

  const ChiTietDichVu({super.key, required this.dichVu});

  @override
  Widget build(BuildContext context) {
    final cart = Cart.of(context); // L·∫•y Cart t·ª´ context
    final cartProvider = cart.cartProvider; // L·∫•y CartProvider t·ª´ Cart

    return Scaffold(
      appBar: AppBar(
        title: Text(
          dichVu['ten']!,
          style: const TextStyle(fontWeight: FontWeight.bold),
        ),
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              ClipRRect(
                borderRadius: BorderRadius.circular(12.0),
                child: Image.network(
                  dichVu['hinhAnh']!,
                  height: 250,
                  width: double.infinity,
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) {
                    return const Icon(
                      Icons.image_not_supported,
                      size: 100,
                      color: Colors.grey,
                    );
                  },
                ),
              ),
              const SizedBox(height: 16),
              Text(
                dichVu['ten']!,
                style: const TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 8),
              Text(
                dichVu['moTa']!,
                style: const TextStyle(fontSize: 16, height: 1.5),
              ),
              const SizedBox(height: 12),
              Text(
                'Gi√°: ${dichVu['gia']}',
                style: const TextStyle(
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  color: Colors.red,
                ),
              ),
              const SizedBox(height: 24),
              Center(
                child: ElevatedButton(
                  onPressed: () {
                    // Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
                    cartProvider.addItem(dichVu); // G·ªçi addItem t·ª´ cartProvider
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text('B·∫°n ƒë√£ ƒë·∫∑t d·ªãch v·ª•: ${dichVu['ten']}'),
                      ),
                    );
                  },
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 32,
                      vertical: 12,
                    ),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                  ),
                  child: const Text(
                    'X√°c nh·∫≠n ƒë·∫∑t d·ªãch v·ª•',
                    style: TextStyle(fontSize: 18),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// #############################################################################################

class ManHinhHoTroKhachHang extends StatelessWidget {
  const ManHinhHoTroKhachHang({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('H·ªó Tr·ª£ Kh√°ch H√†ng')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.start,
          children: [
            ListTile(
              leading: Icon(Icons.email, color: Colors.blueGrey),
              title: Text('G·ª≠i Email H·ªó Tr·ª£'),
              subtitle: Text('support@spathuccung.com'),
              //onTap: _launchEmail,
            ),
            ListTile(
              leading: Icon(Icons.facebook, color: Colors.blue),
              title: Text('Fanpage Facebook'),
              subtitle: Text('facebook.com/spathuccung'),
              //onTap: _launchFacebook,
            ),
            const Divider(),
            Expanded(child: ChatBotWidget()),
          ],
        ),
      ),
    );
  }
}

class ChatBotWidget extends StatefulWidget {
  const ChatBotWidget({super.key});

  @override
  _ChatBotWidgetState createState() => _ChatBotWidgetState();
}

class _ChatBotWidgetState extends State<ChatBotWidget> {
  final List<Map<String, String>> _messages = [];
  final TextEditingController _controller = TextEditingController();

  void _sendMessage() {
    if (_controller.text.isEmpty) return;
    setState(() {
      _messages.add({'user': _controller.text});
      _messages.add({
        'bot': 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ.',
      });
    });
    _controller.clear();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Expanded(
          child: ListView.builder(
            itemCount: _messages.length,
            itemBuilder: (context, index) {
              final message = _messages[index];
              final isUser = message.keys.first == 'user';
              return Align(
                alignment:
                    isUser ? Alignment.centerRight : Alignment.centerLeft,
                child: Container(
                  margin: const EdgeInsets.symmetric(
                    vertical: 4,
                    horizontal: 8,
                  ),
                  padding: const EdgeInsets.all(10),
                  decoration: BoxDecoration(
                    color: isUser ? Colors.lightBlueAccent : Colors.grey[300],
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    message.values.first,
                    style: const TextStyle(color: Colors.black),
                  ),
                ),
              );
            },
          ),
        ),
        Padding(
          padding: const EdgeInsets.all(8.0),
          child: Row(
            children: [
              Expanded(
                child: TextField(
                  controller: _controller,
                  decoration: const InputDecoration(
                    hintText: 'Nh·∫≠p tin nh·∫Øn...',
                  ),
                ),
              ),
              IconButton(
                icon: const Icon(Icons.send, color: Colors.lightBlueAccent),
                onPressed: _sendMessage,
              ),
            ],
          ),
        ),
      ],
    );
  }
}

class User {
  String name;
  String email;
  String password;

  User({required this.name, required this.email, required this.password});
}

class ManHinhUuDai extends StatelessWidget {
  const ManHinhUuDai({super.key});

  final List<Map<String, String>> uuDai = const [
    {
      'tieuDe': 'üî• Gi·∫£m ngay 20% d·ªãch v·ª• t·∫Øm spa',
      'moTa':
          'T·∫≠n h∆∞·ªüng d·ªãch v·ª• t·∫Øm spa cao c·∫•p gi√∫p th√∫ c∆∞ng th∆∞ gi√£n, l√†m s·∫°ch l√¥ng, kh·ª≠ m√πi h√¥i.',
      'hinhAnh': 'https://thucungshinpet.com/wp-content/uploads/2023/02/2.jpg',
      'thoiGian': '‚è≥ H·∫°n cu·ªëi: 31/03/2025',
    },
    {
      'tieuDe': 'üéÅ Mua 2 t·∫∑ng 1 th·ª©c ƒÉn',
      'moTa':
          'Mua 2 g√≥i th·ª©c ƒÉn b·∫•t k·ª≥, nh·∫≠n ngay 1 g√≥i mi·ªÖn ph√≠. H√†ng ch√≠nh h√£ng, dinh d∆∞·ª°ng cao!',
      'hinhAnh':
          'https://petservicehcm.com/wp-content/uploads/2024/07/thuc-an-cho-thu-cung.jpg',
      'thoiGian': '‚è≥ H·∫°n cu·ªëi: 15/04/2025',
    },
    {
      'tieuDe': 'üíâ Kh√°m s·ª©c kh·ªèe mi·ªÖn ph√≠',
      'moTa':
          'Nh·∫≠n ngay m·ªôt l·∫ßn kh√°m s·ª©c kh·ªèe t·ªïng qu√°t mi·ªÖn ph√≠ khi s·ª≠ d·ª•ng b·∫•t k·ª≥ d·ªãch v·ª• n√†o.',
      'hinhAnh':
          'https://benhvienthuyanipet.com/wp-content/uploads/2021/10/tu-van-kham-chua-benh-pet-3.jpg',
      'thoiGian': '‚è≥ H·∫°n cu·ªëi: 30/04/2025',
    },
    {
      'tieuDe': '‚úÇÔ∏è Gi·∫£m 15% c·∫Øt t·ªâa l√¥ng',
      'moTa':
          'Gi√∫p th√∫ c∆∞ng xinh x·∫Øn h∆°n v·ªõi gi√° ∆∞u ƒë√£i, gi·∫£m ngay 15% khi ƒë·∫∑t l·ªãch tr∆∞·ªõc.',
      'hinhAnh':
          'https://dailytongdo.com/wp-content/uploads/2024/03/cat-tia-tc.jpg',
      'thoiGian': '‚è≥ H·∫°n cu·ªëi: 10/05/2025',
    },
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'üéâ ∆Øu ƒê√£i ƒê·∫∑c Bi·ªát',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.lightBlueAccent,
        centerTitle: true,
      ),
      body: ListView.builder(
        padding: const EdgeInsets.all(15),
        itemCount: uuDai.length,
        itemBuilder: (context, index) {
          final uuDaiItem = uuDai[index];
          return AnimatedContainer(
            duration: const Duration(milliseconds: 500),
            curve: Curves.easeInOut,
            margin: const EdgeInsets.only(bottom: 15),
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(15),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 5,
                  spreadRadius: 2,
                  offset: const Offset(0, 3),
                ),
              ],
            ),
            child: Card(
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(15),
              ),
              elevation: 3,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  ClipRRect(
                    borderRadius: const BorderRadius.vertical(
                      top: Radius.circular(15),
                    ),
                    child: Image.network(
                      uuDaiItem['hinhAnh']!,
                      height: 180,
                      width: double.infinity,
                      fit: BoxFit.cover,
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(12),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          uuDaiItem['tieuDe']!,
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.lightBlueAccent,
                          ),
                        ),
                        const SizedBox(height: 5),
                        Text(
                          uuDaiItem['moTa']!,
                          style: const TextStyle(
                            fontSize: 14,
                            color: Colors.black87,
                          ),
                        ),
                        const SizedBox(height: 10),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              uuDaiItem['thoiGian']!,
                              style: const TextStyle(
                                fontSize: 12,
                                fontWeight: FontWeight.bold,
                                color: Colors.redAccent,
                              ),
                            ),
                            ElevatedButton.icon(
                              onPressed: () {},
                              icon: const Icon(
                                Icons.arrow_forward_ios,
                                size: 16,
                              ),
                              label: const Text('Xem chi ti·∫øt'),
                              style: ElevatedButton.styleFrom(
                                backgroundColor: Colors.lightBlueAccent,
                                foregroundColor: Colors.white,
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                                padding: const EdgeInsets.symmetric(
                                  horizontal: 12,
                                  vertical: 8,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      ),
    );
  }
}

// #############################################################################################

class ManHinhCaiDat extends StatefulWidget {
  const ManHinhCaiDat({Key? key}) : super(key: key);

  @override
  _ManHinhCaiDatState createState() => _ManHinhCaiDatState();
}

class _ManHinhCaiDatState extends State<ManHinhCaiDat> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('C√†i ƒê·∫∑t')),
      body: ListView(
        padding: const EdgeInsets.all(16.0),
        children: [
          ListTile(
            leading: const Icon(Icons.person, color: Colors.blueGrey),
            title: Text(
              auth.FirebaseAuth.instance.currentUser?.displayName ??
                  "Ng∆∞·ªùi d√πng",
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            subtitle: Text(
              auth.FirebaseAuth.instance.currentUser?.email ?? "Ch∆∞a c√≥ email",
              style: const TextStyle(fontSize: 16),
            ),
          ),
          const Divider(),
          ListTile(
            leading: const Icon(Icons.edit),
            title: const Text('ƒê·ªïi t√™n'),
            onTap: () => _doiTenNguoiDung(context),
          ),
          ListTile(
            leading: const Icon(Icons.email),
            title: const Text('ƒê·ªïi Email'),
            onTap: () => _doiEmail(context),
          ),
          ListTile(
            leading: const Icon(Icons.lock),
            title: const Text('ƒê·ªïi m·∫≠t kh·∫©u'),
            onTap: () => _doiMatKhau(context),
          ),
          ListTile(
            leading: const Icon(Icons.info_outline, color: Colors.blueGrey),
            title: const Text('About'),
            subtitle: const Text('Phi√™n b·∫£n 1.0.0\nNh√† ph√°t tri·ªÉn: QQTƒê Team'),
            onTap: () {
              showAboutDialog(
                context: context,
                applicationName: 'Spa Th√∫ C∆∞ng',
                applicationVersion: '1.0.0',
                applicationLegalese: 'Nh√† ph√°t tri·ªÉn: QQTƒê Team',
              );
            },
          ),
          ListTile(
            leading: const Icon(Icons.logout, color: Colors.red),
            title: const Text('ƒêƒÉng xu·∫•t', style: TextStyle(color: Colors.red)),
            onTap: () => _dangXuat(context),
          ),
        ],
      ),
    );
  }

  // H√†m ƒë·ªïi t√™n ng∆∞·ªùi d√πng
  void _doiTenNguoiDung(BuildContext context) {
    TextEditingController tenMoiController = TextEditingController();
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text("ƒê·ªïi t√™n"),
          content: TextField(
            controller: tenMoiController,
            decoration: const InputDecoration(
              labelText: "Nh·∫≠p t√™n m·ªõi",
              border: OutlineInputBorder(),
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("H·ªßy"),
            ),
            TextButton(
              onPressed: () async {
                if (tenMoiController.text.isNotEmpty) {
                  try {
                    await auth.FirebaseAuth.instance.currentUser?.updateProfile(
                      displayName: tenMoiController.text,
                    );
                    setState(() {}); // C·∫≠p nh·∫≠t l·∫°i giao di·ªán
                    Navigator.pop(context);
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text(
                          "T√™n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh: ${tenMoiController.text}",
                        ),
                      ),
                    );
                  } catch (e) {
                    ScaffoldMessenger.of(
                      context,
                    ).showSnackBar(SnackBar(content: Text("L·ªói: $e")));
                  }
                }
              },
              child: const Text("L∆∞u", style: TextStyle(color: Colors.blue)),
            ),
          ],
        );
      },
    );
  }

  // H√†m ƒë·ªïi Email
  void _doiEmail(BuildContext context) {
    TextEditingController emailMoiController = TextEditingController();
    TextEditingController matKhauController = TextEditingController();

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text("ƒê·ªïi Email"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: emailMoiController,
                keyboardType: TextInputType.emailAddress,
                decoration: const InputDecoration(
                  labelText: "Nh·∫≠p email m·ªõi",
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 10),
              TextField(
                controller: matKhauController,
                obscureText: true,
                decoration: const InputDecoration(
                  labelText: "Nh·∫≠p m·∫≠t kh·∫©u",
                  border: OutlineInputBorder(),
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("H·ªßy"),
            ),
            TextButton(
              onPressed: () async {
                if (matKhauController.text.isEmpty) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text("M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
                    ),
                  );
                  return;
                } else if (emailMoiController.text.isEmpty ||
                    !emailMoiController.text.contains("@")) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text("Email kh√¥ng h·ª£p l·ªá")),
                  );
                  return;
                }

                try {
                  auth.User? user = auth.FirebaseAuth.instance.currentUser;

                  if (user != null) {
                    // X√°c th·ª±c l·∫°i ng∆∞·ªùi d√πng tr∆∞·ªõc khi ƒë·ªïi email
                    auth.AuthCredential credential = auth
                        .EmailAuthProvider.credential(
                      email: user.email!,
                      password: matKhauController.text,
                    );

                    await user.reauthenticateWithCredential(credential);

                    // G·ª≠i email x√°c th·ª±c t·ªõi email m·ªõi
                    await user.verifyBeforeUpdateEmail(emailMoiController.text);

                    Navigator.pop(context);
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text(
                          "M·ªôt email x√°c nh·∫≠n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ${emailMoiController.text}. Vui l√≤ng x√°c nh·∫≠n tr∆∞·ªõc khi c·∫≠p nh·∫≠t email.",
                        ),
                      ),
                    );
                  }
                } catch (e) {
                  ScaffoldMessenger.of(
                    context,
                  ).showSnackBar(SnackBar(content: Text("L·ªói: $e")));
                }
              },
              child: const Text("L∆∞u", style: TextStyle(color: Colors.blue)),
            ),
          ],
        );
      },
    );
  }

  // H√†m ƒë·ªïi m·∫≠t kh·∫©u
  void _doiMatKhau(BuildContext context) {
    TextEditingController matKhauCuController = TextEditingController();
    TextEditingController matKhauMoiController = TextEditingController();
    TextEditingController xacNhanMatKhauController = TextEditingController();

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text("ƒê·ªïi m·∫≠t kh·∫©u"),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: matKhauCuController,
                obscureText: true,
                decoration: const InputDecoration(
                  labelText: "M·∫≠t kh·∫©u hi·ªán t·∫°i",
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 10),
              TextField(
                controller: matKhauMoiController,
                obscureText: true,
                decoration: const InputDecoration(
                  labelText: "M·∫≠t kh·∫©u m·ªõi",
                  border: OutlineInputBorder(),
                ),
              ),
              const SizedBox(height: 10),
              TextField(
                controller: xacNhanMatKhauController,
                obscureText: true,
                decoration: const InputDecoration(
                  labelText: "X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi",
                  border: OutlineInputBorder(),
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text("H·ªßy"),
            ),
            TextButton(
              onPressed: () async {
                // Ki·ªÉm tra m·∫≠t kh·∫©u hi·ªán t·∫°i
                if (matKhauCuController.text.isEmpty) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text("M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"),
                    ),
                  );
                } else if (matKhauMoiController.text !=
                    xacNhanMatKhauController.text) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp"),
                    ),
                  );
                } else {
                  try {
                    // ƒêƒÉng nh·∫≠p t·∫°m th·ªùi ƒë·ªÉ x√°c th·ª±c m·∫≠t kh·∫©u
                    UserCredential userCredential = await auth
                        .FirebaseAuth
                        .instance
                        .signInWithEmailAndPassword(
                          email: auth.FirebaseAuth.instance.currentUser!.email!,
                          password: matKhauCuController.text,
                        );

                    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
                    await userCredential.user?.updatePassword(
                      matKhauMoiController.text,
                    );
                    Navigator.pop(context);
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text("M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng"),
                      ),
                    );
                  } catch (e) {
                    ScaffoldMessenger.of(
                      context,
                    ).showSnackBar(SnackBar(content: Text("L·ªói: $e")));
                  }
                }
              },
              child: const Text("L∆∞u", style: TextStyle(color: Colors.blue)),
            ),
          ],
        );
      },
    );
  }

  // H√†m ƒëƒÉng xu·∫•t
  void _dangXuat(BuildContext context) async {
    await auth.FirebaseAuth.instance.signOut();
    Navigator.pushAndRemoveUntil(
      context,
      MaterialPageRoute(builder: (context) => const ManHinhDangNhap()),
      (route) => false,
    );
  }
}

// ##################################################################################

class ManHinhGioHang extends StatefulWidget {
  const ManHinhGioHang({super.key});

  @override
  _ManHinhGioHangState createState() => _ManHinhGioHangState();
}

class _ManHinhGioHangState extends State<ManHinhGioHang> {
  @override
  Widget build(BuildContext context) {
    final cart = Cart.of(context); // L·∫•y Cart t·ª´ context
    final cartProvider = cart.cartProvider; // L·∫•y CartProvider t·ª´ Cart

    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Gi·ªè H√†ng',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.orangeAccent,
        centerTitle: true,
      ),
      body:
          cartProvider.items.isEmpty
              ? const Center(
                child: Text(
                  'Gi·ªè h√†ng tr·ªëng!',
                  style: TextStyle(
                    fontSize: 18,
                    fontWeight: FontWeight.bold,
                    color: Colors.grey,
                  ),
                ),
              )
              : Column(
                children: [
                  Expanded(
                    child: ListView.builder(
                      itemCount: cartProvider.items.length,
                      itemBuilder: (context, index) {
                        return Card(
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(12),
                          ),
                          elevation: 3,
                          margin: const EdgeInsets.symmetric(
                            horizontal: 12,
                            vertical: 6,
                          ),
                          child: ListTile(
                            leading: ClipRRect(
                              borderRadius: BorderRadius.circular(8),
                              child: Image.network(
                                cartProvider.items[index]['hinhAnh']!,
                                width: 60,
                                height: 60,
                                fit: BoxFit.cover,
                              ),
                            ),
                            title: Text(
                              cartProvider.items[index]['ten']!,
                              style: const TextStyle(
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                            subtitle: Text(
                              'Gi√°: ${cartProvider.items[index]['gia']}',
                              style: const TextStyle(color: Colors.deepOrange),
                            ),
                            trailing: IconButton(
                              icon: const Icon(Icons.delete, color: Colors.red),
                              onPressed: () {
                                setState(() {
                                  cartProvider.removeItem(index);
                                });
                                ScaffoldMessenger.of(context).showSnackBar(
                                  const SnackBar(
                                    content: Text(
                                      'S·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi gi·ªè h√†ng!',
                                    ),
                                  ),
                                );
                              },
                            ),
                          ),
                        );
                      },
                    ),
                  ),
                  _buildTotalPrice(cartProvider),
                ],
              ),
      bottomNavigationBar:
          cartProvider.items.isEmpty ? null : _buildOrderButton(cartProvider),
    );
  }

  Widget _buildTotalPrice(CartProvider cartProvider) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Card(
        color: Colors.orangeAccent.withOpacity(0.2),
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Text(
            'T·ªïng s·ªë ti·ªÅn: ${formatCurrency(cartProvider.totalPrice())}',
            style: const TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.black87,
            ),
            textAlign: TextAlign.center,
          ),
        ),
      ),
    );
  }

  Widget _buildOrderButton(CartProvider cartProvider) {
    return Padding(
      padding: const EdgeInsets.all(12.0),
      child: ElevatedButton.icon(
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.orangeAccent,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          padding: const EdgeInsets.symmetric(vertical: 14),
        ),
        onPressed: () {
          ScaffoldMessenger.of(
            context,
          ).showSnackBar(const SnackBar(content: Text('ƒê·∫∑t h√†ng th√†nh c√¥ng!')));
          setState(() {
            cartProvider.clear(); // X√≥a t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng
          });
        },
        icon: const Icon(Icons.shopping_cart_checkout, color: Colors.white),
        label: const Text(
          'X√°c nh·∫≠n ƒë·∫∑t h√†ng',
          style: TextStyle(
            fontSize: 18,
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
      ),
    );
  }
}

class Cart extends InheritedWidget {
  final CartProvider cartProvider;

  const Cart({Key? key, required this.cartProvider, required Widget child})
    : super(key: key, child: child);

  static Cart of(BuildContext context) {
    final Cart? result = context.dependOnInheritedWidgetOfExactType<Cart>();
    assert(result != null, 'No Cart found in context');
    return result!;
  }

  @override
  bool updateShouldNotify(Cart oldWidget) {
    return oldWidget.cartProvider.items != cartProvider.items;
  }
}

class CartProvider {
  List<Map<String, String>> _items = [];

  List<Map<String, String>> get items => _items;

  void addItem(Map<String, String> item) {
    _items.add(item);
  }

  void clear() {
    _items.clear(); // Ph∆∞∆°ng th·ª©c n√†y s·∫Ω x√≥a t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè h√†ng
  }

  void removeItem(int index) {
    if (index >= 0 && index < _items.length) {
      _items.removeAt(index);
    }
  }

  double totalPrice() {
    double total = 0.0;
    for (var item in _items) {
      // Gi·∫£ s·ª≠ gi√° ƒë∆∞·ª£c l∆∞u d∆∞·ªõi d·∫°ng chu·ªói v·ªõi ƒë·ªãnh d·∫°ng "100,000 VND"
      String priceString = item['gia']!
          .replaceAll(',', '')
          .replaceAll(' VND', '');
      total += double.tryParse(priceString) ?? 0.0;
    }
    return total;
  }
}

String formatCurrency(double amount) {
  // ƒê·ªãnh d·∫°ng s·ªë ti·ªÅn v·ªõi d·∫•u ph·∫©y
  return '${amount.toStringAsFixed(0).replaceAllMapped(RegExp(r'(\d)(?=(\d{3})+(?!\d))'), (Match m) => '${m[1]},')} VND';
}
